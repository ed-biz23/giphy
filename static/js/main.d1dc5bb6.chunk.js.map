{"version":3,"sources":["components/SearchField.js","views/GifView.js","App.js","serviceWorker.js","index.js"],"names":["jumboStyle","_jumboStyle","background","Object","defineProperty","SearchField","props","search","random","react_default","a","createElement","Jumbotron","fluid","style","Container","href","textDecoration","Row","Col","sm","md","size","offset","InputGroup","Input","id","InputGroupAddon","addonType","Button","color","onClick","document","getElementById","value","GifView","gif","Card","border","marginBottom","CardImg","src","images","fixed_height_downsampled","url","alt","title","App","API_KEY","_useState","useState","_useState2","slicedToArray","gifs","setGifs","_useState3","concat","_useState4","setUrl","_useState5","_useState6","viewing","setViewing","_useState7","_useState8","isRandom","setIsRandom","useEffect","_ref","asyncToGenerator","regenerator_default","mark","_callee","resp","wrap","_context","prev","next","axios","sent","data","t0","alert","stop","apply","this","arguments","fetchData","className","components_SearchField","v4","map","views_GifView","key","Boolean","window","location","hostname","match","ReactDOM","render","src_App_0","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.d1dc5bb6.chunk.js","sourcesContent":["import React, { useState } from \"react\";\nimport {\n  Container,\n  Row,\n  Col,\n  Jumbotron,\n  InputGroup,\n  Input,\n  InputGroupAddon,\n  Button\n} from \"reactstrap\";\n\nconst jumboStyle = {\n  background: \"#aa4b6b fixed center\" /* fallback for old browsers */,\n  background:\n    \"-webkit-linear-gradient(to right, #3b8d99, #6b6b83, #aa4b6b) fixed center\" /* Chrome 10-25, Safari 5.1-6 */,\n  background:\n    \"linear-gradient(to right, #3b8d99, #6b6b83, #aa4b6b) fixed center\" /* W3C, IE 10+/ Edge, Firefox 16+, Chrome 26+, Opera 12+, Safari 7+ */\n};\n\nconst SearchField = props => {\n  const { search, random } = props;\n\n  return (\n    <div>\n      <Jumbotron fluid style={jumboStyle}>\n        <Container fluid>\n          <a href=\".\" style={{ textDecoration: \"none\" }}>\n            <h1>Giphy</h1>\n          </a>\n          {/* <h1>Giphy</h1> */}\n          <Row>\n            <Col sm=\"12\" md={{ size: 6, offset: 3 }}>\n              <InputGroup>\n                <Input id=\"search\" />\n                <InputGroupAddon addonType=\"append\">\n                  <Button\n                    color=\"primary\"\n                    onClick={() => {\n                      search(document.getElementById(\"search\").value);\n                    }}\n                  >\n                    Search\n                  </Button>\n                </InputGroupAddon>\n                <InputGroupAddon addonType=\"append\">\n                  <Button\n                    color=\"info\"\n                    onClick={() => {\n                      random();\n                    }}\n                  >\n                    Random\n                  </Button>\n                </InputGroupAddon>\n              </InputGroup>\n            </Col>\n          </Row>\n        </Container>\n      </Jumbotron>\n    </div>\n  );\n};\n\nexport default SearchField;\n","import React from \"react\";\nimport ReactDOM from \"react-dom\";\nimport { Card, CardImg, CardTitle, Col } from \"reactstrap\";\n\nconst GifView = props => {\n  const { gif } = props;\n\n  return (\n    <Col sm=\"3\">\n      <Card style={{ border: \"none\", marginBottom: \"0.75rem\" }}>\n        <CardImg\n          src={gif.images.fixed_height_downsampled.url}\n          alt={gif.title}\n        />\n      </Card>\n    </Col>\n  );\n};\n\nexport default GifView;\n","import React, { useState, useEffect } from \"react\";\nimport { Container, Row } from \"reactstrap\";\nimport { v4 } from \"uuid\";\nimport axios from \"axios\";\nimport \"./App.css\";\n\nimport SearchField from \"./components/SearchField\";\nimport GifView from \"./views/GifView\";\n\nconst App = () => {\n  const API_KEY = \"1hOSiwyFAu6RUOiLerPpGfXzCVqILCrG\";\n  const [gifs, setGifs] = useState([]);\n  const [url, setUrl] = useState(\n    `https://api.giphy.com/v1/gifs/trending?api_key=${API_KEY}`\n  );\n  const [viewing, setViewing] = useState(\"Trending\");\n  const [isRandom, setIsRandom] = useState();\n\n  useEffect(() => {\n    const fetchData = async () => {\n      try {\n        const resp = await axios(url);\n        if (isRandom) {\n          setGifs([resp.data.data]);\n          setIsRandom(false);\n        } else {\n          setGifs(resp.data.data);\n        }\n      } catch (error) {\n        alert(error);\n      }\n    };\n    fetchData();\n  }, [url]);\n\n  const search = value => {\n    setUrl(\n      `https://api.giphy.com/v1/gifs/search?q=${value}&api_key=${API_KEY}`\n    );\n    setViewing(value);\n  };\n\n  const random = () => {\n    setIsRandom(true);\n    setUrl(`https://api.giphy.com/v1/gifs/random?&api_key=${API_KEY}#${v4()}`);\n    setViewing(\"Random\");\n  };\n\n  return (\n    <div className=\"App\">\n      <SearchField search={search} random={random} />\n      <Container>\n        <h2>Currently Viewing: {viewing} GIFS</h2>\n        <br />\n        <Row>\n          {gifs.map(gif => (\n            <GifView key={gif.id} gif={gif} />\n          ))}\n        </Row>\n      </Container>\n    </div>\n  );\n};\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from \"react\";\nimport ReactDOM from \"react-dom\";\nimport \"./index.css\";\nimport App from \"./App\";\nimport \"bootstrap/dist/css/bootstrap.min.css\";\nimport * as serviceWorker from \"./serviceWorker\";\n\nReactDOM.render(<App />, document.getElementById(\"root\"));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}